# frozen_string_literal: true

active_admin_form_for [:admin, resource] do |f|
  f.semantic_errors
  f.inputs do
    f.input :libelle
    f.input :nom_technique
    f.input :description
    render partial: 'admin/questions/input_illustration', locals: { f: f }
    f.input :zone_depot,
            as: :file,
            hint: 'Les éléments doivent contenir la classe css `zone-depot` ' \
                  'et la classe css `zone-depot--reponse.nom_technique`',
            input_html: { accept: 'image/svg+xml' }

    if f.object.zone_depot.attached? && f.object.errors[:zone_depot].blank?
      f.input :supprimer_zone_depot,
              as: :boolean,
              label: t('.label.supprimer_zone_depot'),
              hint: svg_attachment_base64(resource.zone_depot,
                                          class: 'image-preview',
                                          alt: resource.zone_depot.filename)
    end
  end
  render partial: 'admin/questions/inputs_avec_transcriptions_audios',
         locals: { f: f }
  f.has_many :reponses, allow_destroy: true, new_record: t('.ajout_reponse'),
                        heading: t('.reponses') do |r|
    r.input :id, as: :hidden
    r.input :nom_technique
    r.input :intitule
    r.input :position_client
    r.input :type_choix, as: :hidden, input_html: { value: :bon }
    label = r.object.illustration.attached? ? t('.label_illustration') : true
    hint =
      if r.object.illustration.attached?
        image_tag(cdn_for(r.object.illustration),
                  alt: r.object.illustration.filename)
      else
        t('.hint')
      end
    r.input :illustration, as: :file,
                           label: label,
                           input_html: { accept: illustration_content_types.join(',') },
                           hint: hint
  end
  f.actions do
    f.action :submit
    annulation_formulaire(f)
  end
end
